name: C/C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache CMake and build files
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache
          build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Install C++ build tools and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++ make build-essential --no-install-recommends

    - name: Configure CMake
      run: |
        mkdir -p build
        cmake -S . -B build

    - name: Build the project
      run: |
        cmake --build build

    - name: Run unit tests
      run: |
        ctest --test-dir build --output-on-failure

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # - name: Get commit count
    #   id: get_commit_count
    #   run: |
    #     COMMIT_COUNT=$(git rev-list --count HEAD)
    #     echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
    - name: Get latest release
      id: get_latest_release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        echo "latest_release=${latest_release}" >> $GITHUB_ENV

    - name: Determine next version
      id: next_version
      run: |
        if [ "${{ env.latest_release }}" = "null" ]; then
          echo "new_version=0.1.0" >> $GITHUB_ENV
        else
          IFS='.' read -r major minor patch <<< "${{ env.latest_release#v }}"
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
        fi

    - name: Create release directory
      run: |
        mkdir release
        shopt -s extglob
        cp -r !(release) release/

    - name: Create release zip file
      run: |
        cd release
        zip -r ../release.zip .

    - name: Create release tarball file
      run: |
        cd release
        tar -czvf ../release.tar.gz .

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        tag_name: "v${{ env.new_version }}"
        name: "Release v${{ env.new_version }}"
        body: "Release for commit number v${{ env.new_version }}"
        files: |
          release.zip
          release.tar.gz
